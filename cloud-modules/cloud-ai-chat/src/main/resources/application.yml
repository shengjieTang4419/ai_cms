server:
  port: 18080

spring:
  application:
    name: spring-ai-aiChat
  datasource:
    url: jdbc:postgresql://127.0.0.1:5432/cms
    username: postgres
    password: 'small@123$%^'
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update  # 开发环境使用update，生产环境用validate
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          time_zone: Asia/Shanghai
  data:
    redis:
      host: localhost
      port: 6379
      password: 123456
      database: 0
    mongodb:
      uri: mongodb://root:sangfor!%40%23123@127.0.0.1:27017/aiChat?authSource=admin
  ai:
    dashscope:
      # 参考 https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2803795.html&renderType=iframe
      api-key: ${DASHSCOPE_API_KEY}
    mcp:
      server:
        base-url: /api/mcp
        type: ASYNC

  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
logging:
  level:
    com.cloud.cloud.ai.chat.mcp.service: DEBUG
    reactor.netty.http.client: DEBUG
    org.springframework.ai.chat.client: DEBUG  # 添加这行，查看工具调用决策
    org.springframework.ai.tool: DEBUG          # 添加这行，查看工具执行
map:
  api-key: ${AMAP_API_KEY}

# MinIO对象存储配置
minio:
  endpoint: http://localhost:9000
  access-key: minioadmin
  secret-key: minioadmin123
  bucket-name: images
  # MinIO公网访问URL（可选）：如果MinIO部署在公网，配置此项可以让OCR服务使用公网URL
  # 格式示例：https://minio.example.com
  # 如果未配置，将尝试使用预签名URL（前提是MinIO endpoint必须是公网可访问的）
  public-url:

# 图片上传配置
app:
  base-url: http://localhost:18080
